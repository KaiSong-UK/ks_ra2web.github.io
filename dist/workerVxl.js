"use strict";(self.webpackChunkra2ts_client=self.webpackChunkra2ts_client||[]).push([[966],{514:()=>{importScripts("../lib/three.min.js?v=0.94")},998:(e,t,n)=>{n.r(t),n.d(t,{generateVxlGeometry:()=>g}),n(514);class i{constructor(e,t,n=i.LITTLE_ENDIAN){this.endianness=n,this.position=0,this._dynamicSize=!0,this._byteLength=0,this._byteOffset=t||0,e instanceof ArrayBuffer?this.buffer=e:"object"==typeof e?(this.dataView=e,t&&(this._byteOffset+=t)):this.buffer=new ArrayBuffer(e||0)}get dynamicSize(){return this._dynamicSize}set dynamicSize(e){e||this._trimAlloc(),this._dynamicSize=e}get byteLength(){return this._byteLength-this._byteOffset}get buffer(){return this._trimAlloc(),this._buffer}set buffer(e){this._buffer=e,this._dataView=new DataView(this._buffer,this._byteOffset),this._byteLength=this._buffer.byteLength}get byteOffset(){return this._byteOffset}set byteOffset(e){this._byteOffset=e,this._dataView=new DataView(this._buffer,this._byteOffset),this._byteLength=this._buffer.byteLength}get dataView(){return this._dataView}set dataView(e){this._byteOffset=e.byteOffset,this._buffer=e.buffer,this._dataView=new DataView(this._buffer,this._byteOffset),this._byteLength=this._byteOffset+e.byteLength}bigEndian(){return this.endianness=i.BIG_ENDIAN,this}_realloc(e){if(!this._dynamicSize)return;const t=this._byteOffset+this.position+e;let n=this._buffer.byteLength;if(t<=n)return void(t>this._byteLength&&(this._byteLength=t));for(n<1&&(n=1);t>n;)n*=2;const i=new ArrayBuffer(n),r=new Uint8Array(this._buffer);new Uint8Array(i,0,r.length).set(r),this.buffer=i,this._byteLength=t}_trimAlloc(){if(this._byteLength===this._buffer.byteLength)return;const e=new ArrayBuffer(this._byteLength),t=new Uint8Array(e),n=new Uint8Array(this._buffer,0,t.length);t.set(n),this.buffer=e}seek(e){const t=Math.max(0,Math.min(this.byteLength,e));this.position=isNaN(t)||!isFinite(t)?0:t}isEof(){return this.position>=this.byteLength}mapInt32Array(e,t){this._realloc(4*e);const n=new Int32Array(this._buffer,this.byteOffset+this.position,e);return i.arrayToNative(n,void 0===t?this.endianness:t),this.position+=4*e,n}mapInt16Array(e,t){this._realloc(2*e);const n=new Int16Array(this._buffer,this.byteOffset+this.position,e);return i.arrayToNative(n,void 0===t?this.endianness:t),this.position+=2*e,n}mapInt8Array(e){this._realloc(e);const t=new Int8Array(this._buffer,this.byteOffset+this.position,e);return this.position+=e,t}mapUint32Array(e,t){this._realloc(4*e);const n=new Uint32Array(this._buffer,this.byteOffset+this.position,e);return i.arrayToNative(n,void 0===t?this.endianness:t),this.position+=4*e,n}mapUint16Array(e,t){this._realloc(2*e);const n=new Uint16Array(this._buffer,this.byteOffset+this.position,e);return i.arrayToNative(n,void 0===t?this.endianness:t),this.position+=2*e,n}mapUint8Array(e){this._realloc(e);const t=new Uint8Array(this._buffer,this.byteOffset+this.position,e);return this.position+=e,t}mapFloat64Array(e,t){this._realloc(8*e);const n=new Float64Array(this._buffer,this.byteOffset+this.position,e);return i.arrayToNative(n,void 0===t?this.endianness:t),this.position+=8*e,n}mapFloat32Array(e,t){this._realloc(4*e);const n=new Float32Array(this._buffer,this.byteOffset+this.position,e);return i.arrayToNative(n,void 0===t?this.endianness:t),this.position+=4*e,n}readInt32Array(e,t){e=void 0===e?this.byteLength-this.position/4:e;const n=new Int32Array(e);return i.memcpy(n.buffer,0,this.buffer,this.byteOffset+this.position,e*n.BYTES_PER_ELEMENT),i.arrayToNative(n,void 0===t?this.endianness:t),this.position+=n.byteLength,n}readInt16Array(e,t){e=void 0===e?this.byteLength-this.position/2:e;const n=new Int16Array(e);return i.memcpy(n.buffer,0,this.buffer,this.byteOffset+this.position,e*n.BYTES_PER_ELEMENT),i.arrayToNative(n,void 0===t?this.endianness:t),this.position+=n.byteLength,n}readInt8Array(e){e=void 0===e?this.byteLength-this.position:e;const t=new Int8Array(e);return i.memcpy(t.buffer,0,this.buffer,this.byteOffset+this.position,e*t.BYTES_PER_ELEMENT),this.position+=t.byteLength,t}readUint32Array(e,t){e=void 0===e?this.byteLength-this.position/4:e;const n=new Uint32Array(e);return i.memcpy(n.buffer,0,this.buffer,this.byteOffset+this.position,e*n.BYTES_PER_ELEMENT),i.arrayToNative(n,void 0===t?this.endianness:t),this.position+=n.byteLength,n}readUint16Array(e,t){e=void 0===e?this.byteLength-this.position/2:e;const n=new Uint16Array(e);return i.memcpy(n.buffer,0,this.buffer,this.byteOffset+this.position,e*n.BYTES_PER_ELEMENT),i.arrayToNative(n,void 0===t?this.endianness:t),this.position+=n.byteLength,n}readUint8Array(e){e=void 0===e?this.byteLength-this.position:e;const t=new Uint8Array(e);return i.memcpy(t.buffer,0,this.buffer,this.byteOffset+this.position,e*t.BYTES_PER_ELEMENT),this.position+=t.byteLength,t}readFloat64Array(e,t){e=void 0===e?this.byteLength-this.position/8:e;const n=new Float64Array(e);return i.memcpy(n.buffer,0,this.buffer,this.byteOffset+this.position,e*n.BYTES_PER_ELEMENT),i.arrayToNative(n,void 0===t?this.endianness:t),this.position+=n.byteLength,n}readFloat32Array(e,t){e=void 0===e?this.byteLength-this.position/4:e;const n=new Float32Array(e);return i.memcpy(n.buffer,0,this.buffer,this.byteOffset+this.position,e*n.BYTES_PER_ELEMENT),i.arrayToNative(n,void 0===t?this.endianness:t),this.position+=n.byteLength,n}writeInt32Array(e,t){if(this._realloc(4*e.length),e instanceof Int32Array&&(this.byteOffset+this.position)%e.BYTES_PER_ELEMENT==0)i.memcpy(this._buffer,this.byteOffset+this.position,e.buffer,e.byteOffset,e.byteLength),this.mapInt32Array(e.length,t);else for(let n=0;n<e.length;n++)this.writeInt32(e[n],t);return this}writeInt16Array(e,t){if(this._realloc(2*e.length),e instanceof Int16Array&&(this.byteOffset+this.position)%e.BYTES_PER_ELEMENT==0)i.memcpy(this._buffer,this.byteOffset+this.position,e.buffer,e.byteOffset,e.byteLength),this.mapInt16Array(e.length,t);else for(let n=0;n<e.length;n++)this.writeInt16(e[n],t);return this}writeInt8Array(e){if(this._realloc(e.length),e instanceof Int8Array&&(this.byteOffset+this.position)%e.BYTES_PER_ELEMENT==0)i.memcpy(this._buffer,this.byteOffset+this.position,e.buffer,e.byteOffset,e.byteLength),this.mapInt8Array(e.length);else for(let t=0;t<e.length;t++)this.writeInt8(e[t]);return this}writeUint32Array(e,t){if(this._realloc(4*e.length),e instanceof Uint32Array&&(this.byteOffset+this.position)%e.BYTES_PER_ELEMENT==0)i.memcpy(this._buffer,this.byteOffset+this.position,e.buffer,e.byteOffset,e.byteLength),this.mapUint32Array(e.length,t);else for(let n=0;n<e.length;n++)this.writeUint32(e[n],t);return this}writeUint16Array(e,t){if(this._realloc(2*e.length),e instanceof Uint16Array&&(this.byteOffset+this.position)%e.BYTES_PER_ELEMENT==0)i.memcpy(this._buffer,this.byteOffset+this.position,e.buffer,e.byteOffset,e.byteLength),this.mapUint16Array(e.length,t);else for(let n=0;n<e.length;n++)this.writeUint16(e[n],t);return this}writeUint8Array(e){if(this._realloc(e.length),e instanceof Uint8Array&&(this.byteOffset+this.position)%e.BYTES_PER_ELEMENT==0)i.memcpy(this._buffer,this.byteOffset+this.position,e.buffer,e.byteOffset,e.byteLength),this.mapUint8Array(e.length);else for(let t=0;t<e.length;t++)this.writeUint8(e[t]);return this}writeFloat64Array(e,t){if(this._realloc(8*e.length),e instanceof Float64Array&&(this.byteOffset+this.position)%e.BYTES_PER_ELEMENT==0)i.memcpy(this._buffer,this.byteOffset+this.position,e.buffer,e.byteOffset,e.byteLength),this.mapFloat64Array(e.length,t);else for(let n=0;n<e.length;n++)this.writeFloat64(e[n],t);return this}writeFloat32Array(e,t){if(this._realloc(4*e.length),e instanceof Float32Array&&(this.byteOffset+this.position)%e.BYTES_PER_ELEMENT==0)i.memcpy(this._buffer,this.byteOffset+this.position,e.buffer,e.byteOffset,e.byteLength),this.mapFloat32Array(e.length,t);else for(let n=0;n<e.length;n++)this.writeFloat32(e[n],t);return this}readInt32(e){const t=this._dataView.getInt32(this.position,void 0===e?this.endianness:e);return this.position+=4,t}readInt16(e){const t=this._dataView.getInt16(this.position,void 0===e?this.endianness:e);return this.position+=2,t}readInt8(){const e=this._dataView.getInt8(this.position);return this.position+=1,e}readUint32(e){const t=this._dataView.getUint32(this.position,void 0===e?this.endianness:e);return this.position+=4,t}readUint16(e){const t=this._dataView.getUint16(this.position,void 0===e?this.endianness:e);return this.position+=2,t}readUint8(){const e=this._dataView.getUint8(this.position);return this.position+=1,e}readFloat32(e){const t=this._dataView.getFloat32(this.position,void 0===e?this.endianness:e);return this.position+=4,t}readFloat64(e){const t=this._dataView.getFloat64(this.position,void 0===e?this.endianness:e);return this.position+=8,t}writeInt32(e,t){return this._realloc(4),this._dataView.setInt32(this.position,e,void 0===t?this.endianness:t),this.position+=4,this}writeInt16(e,t){return this._realloc(2),this._dataView.setInt16(this.position,e,void 0===t?this.endianness:t),this.position+=2,this}writeInt8(e){return this._realloc(1),this._dataView.setInt8(this.position,e),this.position+=1,this}writeUint32(e,t){return this._realloc(4),this._dataView.setUint32(this.position,e,void 0===t?this.endianness:t),this.position+=4,this}writeUint16(e,t){return this._realloc(2),this._dataView.setUint16(this.position,e,void 0===t?this.endianness:t),this.position+=2,this}writeUint8(e){return this._realloc(1),this._dataView.setUint8(this.position,e),this.position+=1,this}writeFloat32(e,t){return this._realloc(4),this._dataView.setFloat32(this.position,e,void 0===t?this.endianness:t),this.position+=4,this}writeFloat64(e,t){return this._realloc(8),this._dataView.setFloat64(this.position,e,void 0===t?this.endianness:t),this.position+=8,this}static memcpy(e,t,n,i,r){const s=new Uint8Array(e,t,r),o=new Uint8Array(n,i,r);s.set(o)}static arrayToNative(e,t){return t===this.endianness?e:this.flipArrayEndianness(e)}static nativeToEndian(e,t){return this.endianness===t?e:this.flipArrayEndianness(e)}static flipArrayEndianness(e){const t=new Uint8Array(e.buffer,e.byteOffset,e.byteLength);for(let n=0;n<e.byteLength;n+=e.BYTES_PER_ELEMENT)for(let i=n+e.BYTES_PER_ELEMENT-1,r=n;i>r;i--,r++){const e=t[r];t[r]=t[i],t[i]=e}return e}static createStringFromArray(e){const t=[];for(let n=0;n<e.length;n+=32768)t.push(String.fromCharCode.apply(void 0,e.subarray(n,n+32768)));return t.join("")}readUCS2String(e,t){return i.createStringFromArray(this.readUint16Array(e,t))}writeUCS2String(e,t,n){void 0===n&&(n=e.length);let i=0;for(;i<e.length&&i<n;i++)this.writeUint16(e.charCodeAt(i),t);for(;i<n;i++)this.writeUint16(0);return this}readString(e,t){return void 0===t||"ASCII"===t?i.createStringFromArray(this.mapUint8Array(void 0===e?this.byteLength-this.position:e)):new TextDecoder(t).decode(this.mapUint8Array(e))}writeString(e,t,n){if(void 0===t||"ASCII"===t)if(void 0!==n){let t;const i=Math.min(e.length,n);for(t=0;t<i;t++)this.writeUint8(e.charCodeAt(t));for(;t<n;t++)this.writeUint8(0)}else for(let t=0;t<e.length;t++)this.writeUint8(e.charCodeAt(t));else this.writeUint8Array((new TextEncoder).encode(e.substring(0,n)));return this}writeUtf8WithLen(e){const t=(new TextEncoder).encode(e);return this.writeUint16(t.length).writeUint8Array(t)}readUtf8WithLen(){const e=this.readUint16();return(new TextDecoder).decode(this.mapUint8Array(e))}readCString(e){const t=this.byteLength-this.position,n=new Uint8Array(this._buffer,this._byteOffset+this.position);let r=t;void 0!==e&&(r=Math.min(e,t));let s=0;for(;s<r&&0!==n[s];s++);const o=i.createStringFromArray(this.mapUint8Array(s));return void 0!==e?this.position+=r-s:s!==t&&(this.position+=1),o}writeCString(e,t){if(void 0!==t){let n;const i=Math.min(e.length,t);for(n=0;n<i;n++)this.writeUint8(e.charCodeAt(n));for(;n<t;n++)this.writeUint8(0)}else{for(let t=0;t<e.length;t++)this.writeUint8(e.charCodeAt(t));this.writeUint8(0)}return this}toUint8Array(){return new Uint8Array(this.buffer,this.byteOffset,this.byteLength)}}i.BIG_ENDIAN=!1,i.LITTLE_ENDIAN=!0,i.endianness=new Int8Array(new Int16Array([1]).buffer)[0]>0;class r extends Error{constructor(){super(...arguments),this.name="IOError"}}var s=THREE.Vector3;const o=[new s(.54946297,-183e-6,-.835518),new s(.00014400001,.54940403,-.83555698),new s(-.54940403,-68000001e-12,-.83555698),new s(106e-6,-.54946297,-.835518),new s(.94900799,.00031599999,-.31525001),new s(-186e-6,.94899702,-.31528401),new s(-.94899702,.00031800001,-.31528401),new s(-447e-6,-.94900799,-.31525001),new s(.95084399,-279e-6,.30967101),new s(202e-6,.95084798,.30965701),new s(-.95084798,-70000002e-12,.30965701),new s(147e-6,-.95084399,.30967101),new s(.55237001,-11e-6,.83359897),new s(19999999e-12,.55238003,.833592),new s(-.55238003,57000001e-12,.83359301),new s(-66000001e-12,-.55237001,.83359897)],a=[new s(.67121398,.19849201,-.714194),new s(.26964301,.58439398,-.76536),new s(-.040546,.096988,-.99445897),new s(-.57242799,-.091913998,-.81478697),new s(-.17140099,-.57270998,-.80163902),new s(.36255699,-.30299899,-.88133103),new s(.81034702,-.34897199,-.470698),new s(.103962,.93867201,-.328767),new s(-.324047,.58766901,-.74137598),new s(-.80086499,.34046099,-.49264699),new s(-.66549802,-.59014702,-.45698899),new s(.314767,-.803002,-.506073),new s(.97262901,.151076,-.17655),new s(.680291,.68423599,-.26272699),new s(-.52007902,.82777703,-.210483),new s(-.96164399,-.179001,-.207847),new s(-.262714,-.937451,-.22840101),new s(.219707,-.97130102,.091124997),new s(.92380798,-.229975,.30608699),new s(-.082488999,.97065997,.225866),new s(-.59179801,.69678998,.40528899),new s(-.92529601,.36660099,.097111002),new s(-.705051,-.68777502,.172828),new s(.7324,-.68036699,-.026304999),new s(.85516202,.37458199,.358311),new s(.47300601,.83648002,.276705),new s(-.097617,.65411198,.750072),new s(-.90412402,-.153725,.39865801),new s(-.211916,-.85808998,.46773201),new s(.50022697,-.67440802,.543091),new s(.584539,-.110249,.80384099),new s(.43737301,.45464399,.77588898),new s(-.042440999,.083318003,.995619),new s(-.59625101,.22013199,.77202803),new s(-.506455,-.39697701,.76544899),new s(.070569001,-.47847399,.87526202)],h=[new s(.45651099,-.073968001,-.88663799),new s(.50769401,.38511699,-.77067),new s(.095431998,.22666401,-.96928602),new s(-.35876599,.54318798,-.75910097),new s(-.361276,.13299499,-.92292601),new s(-.48311701,-.32406601,-.813375),new s(-.018073,-.197559,-.980124),new s(.3211,-.501477,-.80337799),new s(.79949099,.069615997,-.59662998),new s(.390971,.77130598,-.50222403),new s(.080782004,.61448997,-.784778),new s(-.73275,.41143101,-.54203498),new s(-.73525399,.0091019999,-.67773098),new s(-.80249399,-.39490801,-.44727099),new s(-.13413,-.58915502,-.79680902),new s(.71955299,-.37622699,-.58369303),new s(.96687502,.173593,-.187132),new s(.760831,.51910597,-.38944301),new s(-.114642,.87551898,-.46938601),new s(-.53236699,.76885903,-.354177),new s(-.96226698,.024977,-.27095801),new s(-.46738699,-.721986,-.51018202),new s(.058449998,-.85235399,-.51968902),new s(.49823299,-.74374002,-.44566301),new s(.93915099,-.27024499,-.212044),new s(.58393198,.80944198,-.061857),new s(.183797,.97322798,-.138007),new s(-.88435501,.45221901,-.115822),new s(-.943178,-.33206701,.012138),new s(-.69844002,-.70656699,-.113772),new s(-.228411,-.95470601,-.190694),new s(.73156399,-.675861,-.089588001),new s(.96925098,.046804,.24158201),new s(.85564703,.50347698,.119916),new s(-.25115299,.96794701,-80999998e-12),new s(-.64779502,.75674897,.087711997),new s(-.96916401,.14519399,.1991),new s(-.41479301,-.88896698,.194126),new s(.25077501,-.961178,-.115109),new s(.47862899,-.84259301,.246883),new s(.89004397,-.39614201,.225595),new s(.52405101,.76235998,.37970701),new s(.11962,.94548202,.30291),new s(-.76085001,.49007499,.42536199),new s(-.86978501,-.20215,.450122),new s(-.70946699,-.60242403,.36570701),new s(.019308999,-.95887101,.28318599),new s(.626113,-.564677,.53770101),new s(.769943,-.126663,.62541503),new s(.76419097,.35070199,.54131401),new s(-.001878,.74136698,.67109799),new s(-.37088001,.81836802,.43900099),new s(-.71390897,.12865201,.68831801),new s(-.295165,-.73866397,.60601401),new s(.186195,-.73836899,.648184),new s(.387523,-.35878301,.84917599),new s(.481022,.124846,.86777401),new s(.391808,.54505599,.741216),new s(-.0035359999,.36559799,.93076599),new s(-.42049801,.484961,.76680797),new s(-.35490301,.019470001,.93470001),new s(-.54783702,-.35920799,.75554299),new s(-.106662,-.445115,.88909799),new s(.086796001,-.059307002,.99445897)],w=[new s(.52657801,-.35962099,-.77031702),new s(.150482,.43598399,.88728398),new s(.414195,.73825502,-.53237402),new s(.075152002,.91624898,-.393498),new s(-.316149,.93073601,-.18379299),new s(-.77381903,.62333399,-.11251),new s(-.90084201,.42853701,-.069568001),new s(-.99894202,-.010971,.044665001),new s(-.979761,-.15767001,-.123324),new s(-.91127402,-.362371,-.19562),new s(-.62406898,-.72094101,-.301301),new s(-.310173,-.80934501,-.498752),new s(.146613,-.81581903,-.55941403),new s(-.71651602,-.69435602,-.066887997),new s(.50397199,-.114202,-.85613698),new s(.45549101,.87262702,-.176211),new s(-.00501,-.114373,-.99342501),new s(-.104675,-.327701,-.93896502),new s(.56041199,.75258899,-.34575599),new s(-.060575999,.82162797,-.566796),new s(-.30234101,.79700702,-.522847),new s(-.671543,.67074001,-.314863),new s(-.77840102,-.12835699,.61450499),new s(-.92404997,.278382,-.261985),new s(-.69977301,-.55049098,-.45527801),new s(-.56824797,-.51718903,-.64000797),new s(.054097999,-.93286401,-.356143),new s(.75838202,.57289302,-.31088799),new s(.0036200001,.30502599,-.95233703),new s(-.060849998,-.98688602,-.14951099),new s(.63523,.045478001,-.77098298),new s(.52170497,.241309,-.81828701),new s(.26940399,.63542497,-.72364098),new s(.045676,.67275399,-.738455),new s(-.180511,.67465699,-.71571898),new s(-.397131,.63664001,-.66104198),new s(-.55200398,.47251499,-.687038),new s(-.77217001,.08309,-.62996),new s(-.669819,-.119533,-.73284),new s(-.54045498,-.31844401,-.77878201),new s(-.38613501,-.522789,-.75999397),new s(-.261466,-.68856698,-.676395),new s(-.019412,-.69610298,-.71767998),new s(.30356899,-.48184401,-.82199299),new s(.68193901,-.19512901,-.70490003),new s(-.24488901,-.116562,-.96251899),new s(.80075902,-.022979001,-.59854603),new s(-.37027499,.095583998,-.92399102),new s(-.33067101,-.32657799,-.88543999),new s(-.16322,-.52757901,-.83367902),new s(.12639,-.313146,-.941257),new s(.34954801,-.27222601,-.89649802),new s(.23991799,-.085825004,-.96699202),new s(.390845,.081537001,-.91683799),new s(.25526699,.26869699,-.92878503),new s(.146245,.48043799,-.86474901),new s(-.32601601,.47845599,-.81534898),new s(-.46968201,-.112519,-.87563598),new s(.81844002,-.25852001,-.51315099),new s(-.474318,.292238,-.83043301),new s(.778943,.39584199,-.48637101),new s(.62409401,.39377299,-.67487001),new s(.74088597,.203834,-.63995302),new s(.48021701,.565768,-.67029703),new s(.38093001,.42453501,-.82137799),new s(-.093422003,.50112402,-.86031801),new s(-.236485,.29619801,-.92538702),new s(-.131531,.093959004,-.98684901),new s(-.82356203,.29577699,-.48400599),new s(.61106598,-.624304,-.486664),new s(.069495998,-.52033001,-.85113299),new s(.226522,-.66487902,-.711775),new s(.47130799,-.56890398,-.67395699),new s(.38842499,-.74262398,-.54556),new s(.78367501,-.48072901,-.39338499),new s(.962394,.135676,-.235349),new s(.876607,.172034,-.449406),new s(.63340503,.58979303,-.50094098),new s(.182276,.80065799,-.57072097),new s(.177003,.76413399,.62029701),new s(-.544016,.675515,-.49772099),new s(-.67929697,.28646699,-.67564201),new s(-.59039098,.091369003,-.801929),new s(-.82436001,-.13312399,-.55018902),new s(-.71579403,-.33454201,-.61296099),new s(.17428599,-.89248401,.416049),new s(-.082528003,-.83712298,-.54075301),new s(.28333101,-.88087398,-.37918901),new s(.675134,-.42662701,-.60181701),new s(.84372002,-.512335,-.160156),new s(.97730398,-.098555997,-.18752),new s(.846295,.522672,-.102947),new s(.67714101,.72132498,-.145501),new s(.32096499,.87089199,-.37219399),new s(-.178978,.911533,-.37023601),new s(-.44716901,.82670099,-.341474),new s(-.70320302,.496328,-.50908101),new s(-.97718102,.063562997,-.202674),new s(-.87817001,-.412938,.241455),new s(-.83583099,-.35855001,-.415728),new s(-.499174,-.69343299,-.51959199),new s(-.188789,-.92375302,-.33322501),new s(.19225401,-.96936101,-.152896),new s(.51594001,-.783907,-.34539199),new s(.90592498,-.30095199,-.29787099),new s(.99111199,-.127746,.037106998),new s(.99513501,.098424003,-.0043830001),new s(.76012301,.64627701,.067367002),new s(.205221,.95958,-.192591),new s(-.042750001,.97951299,-.19679099),new s(-.43801701,.89892697,.0084920004),new s(-.82199401,.48078501,-.30523899),new s(-.89991701,.081710003,-.42833701),new s(-.92661202,-.144618,-.347096),new s(-.79365999,-.55779201,-.24283899),new s(-.43134999,-.84777898,-.30855799),new s(-.0054919999,-.96499997,.26219299),new s(.58790499,-.80402601,-.088940002),new s(.69949299,-.66768599,-.254765),new s(.88930303,.359795,-.282291),new s(.780972,.197037,.59267199),new s(.52012098,.50669599,.68755698),new s(.40389499,.69396102,.59605998),new s(-.154983,.89923602,.40909001),new s(-.65733802,.53716803,.528543),new s(-.74619502,.33409101,.575827),new s(-.62495202,-.049144,.77911502),new s(.31814101,-.254715,.913185),new s(-.555897,.405294,.725752),new s(-.79443401,.099405997,.59916002),new s(-.64036101,-.68946302,.33849499),new s(-.12671299,-.73409498,.66711998),new s(.105457,-.78081697,.61579502),new s(.40799299,-.48091599,.77605498),new s(.69513601,-.54512,.468647),new s(.97319102,-.0064889998,.229908),new s(.94689399,.317509,-.050799001),new s(.56358302,.82561201,.027183),new s(.325773,.94542301,.0069490001),new s(-.171821,.98509699,-.0078149997),new s(-.67044097,.73993897,.054768998),new s(-.822981,.55496198,.121322),new s(-.96619302,.117857,.229307),new s(-.95376903,-.29470399,.058945),new s(-.86438698,-.50272799,-.010015),new s(-.53060901,-.84200603,-.097365998),new s(-.162618,-.98407501,.071772002),new s(.081446998,-.99601102,.036439002),new s(.74598402,-.66596299,.00076199998),new s(.94205701,-.32926899,-.064106002),new s(.93970197,-.28108999,.194803),new s(.77121401,.55067003,.319363),new s(.641348,.73069,.23402099),new s(.080682002,.99669099,.0098789996),new s(-.046725001,.97664303,.20972501),new s(-.53107601,.82100099,.209562),new s(-.69581503,.65599,.29243499),new s(-.97612202,.216709,-.014913),new s(-.96166098,-.14412899,.23331399),new s(-.772084,-.61364698,.165299),new s(-.44960001,-.83605999,.314426),new s(-.39269999,-.91461599,.096247002),new s(.390589,-.91947001,.044890001),new s(.58252901,-.79919797,.148127),new s(.866431,-.48981199,.096864),new s(.90458697,.111498,.41145),new s(.95353699,.23232999,.191806),new s(.497311,.77080297,.398177),new s(.194066,.95631999,.218611),new s(.422876,.882276,.206797),new s(-.373797,.84956598,.37217399),new s(-.53449702,.71402299,.4522),new s(-.881827,.23716,.40759799),new s(-.904948,-.014069,.42528901),new s(-.751827,-.51281703,.41445801),new s(-.50101501,-.69791698,.51175803),new s(-.23519,-.92592299,.295555),new s(.228983,-.95393997,.193819),new s(.734025,-.63489801,.241062),new s(.91375297,-.063253,-.40131599),new s(.90573502,-.161487,.391875),new s(.85892999,.342446,.38074899),new s(.62448603,.60758102,.49077699),new s(.28926399,.85747898,.42550799),new s(.069968,.90216899,.42567101),new s(-.28617999,.94069999,.182165),new s(-.57401299,.80511898,-.14930899),new s(.111258,.099717997,-.98877603),new s(-.30539301,-.94422799,-.12316),new s(-.60116601,-.78957599,.123163),new s(-.290645,-.81213999,.50591898),new s(-.064920001,-.87716299,.47578499),new s(.408301,-.862216,.29978901),new s(.56609702,-.72556603,.39126399),new s(.83936399,-.427387,.33586901),new s(.81889999,-.041305002,.57244802),new s(.71978402,.41499701,.55649698),new s(.88174403,.45027,.140659),new s(.40182301,-.89822,-.17815199),new s(-.054019999,.79134399,.60898),new s(-.29377401,.76399398,.57446498),new s(-.450798,.61034697,.65135098),new s(-.63822103,.186694,.74687302),new s(-.87287003,-.25712699,.41470799),new s(-.58725703,-.52170998,.618828),new s(-.35365799,-.64197397,.680291),new s(.041648999,-.61127299,.79032302),new s(.348342,-.77918297,.52108699),new s(.499167,-.62244099,.602826),new s(.79001898,-.30383101,.53250003),new s(.66011798,.060733002,.74870199),new s(.60492098,.29416099,.73996001),new s(.38569701,.37934601,.84103203),new s(.239693,.207876,.94833201),new s(.012623,.25853199,.96591997),new s(-.100557,.457147,.88368797),new s(.046967,.62858802,.77631903),new s(-.43039101,-.44540501,.785097),new s(-.43429101,-.196228,.87913901),new s(-.25663701,-.336867,.90590203),new s(-.131372,-.15891001,.97851402),new s(.102379,-.208767,.972592),new s(.195687,-.450129,.87125802),new s(.62731898,-.42314801,.65377098),new s(.68743902,-.171583,.70568198),new s(.27592,-.021255,.96094602),new s(.45936701,.15746599,.87417799),new s(.285395,.583184,.76055598),new s(-.81217402,.46030301,.35846099),new s(-.189068,.64122301,.743698),new s(-.338875,.47648001,.811252),new s(-.92099398,.347186,.176727),new s(.040638998,.024465,.99887401),new s(-.73913199,-.35374701,.57318997),new s(-.60351199,-.28661501,.74405998),new s(-.188676,-.547059,.81555402),new s(-.026045,-.39782,.91709399),new s(.26789701,-.649041,.71202302),new s(.518246,-.28489101,.80638599),new s(.493451,-.066532999,.86722499),new s(-.328188,.140251,.93414301),new s(.328188,.140251,.93414301),new s(-.328188,.140251,.93414301),new s(-.328188,.140251,.93414301),new s(-.328188,.140251,.93414301)];class f{constructor(e,t,n){this.sizeX=e,this.sizeY=t,this.sizeZ=n,this.arr=new Array(e*t*n)}add(e){this.arr[e.x+e.y*this.sizeX+e.z*this.sizeX*this.sizeY]=e}get(e,t,n){if(!(e>=this.sizeX||t>=this.sizeY||n>=this.sizeZ))return this.arr[e+t*this.sizeX+n*this.sizeX*this.sizeY]}}class l{get spanX(){return this.maxBounds.x-this.minBounds.x}get spanY(){return this.maxBounds.y-this.minBounds.y}get spanZ(){return this.maxBounds.z-this.minBounds.z}get scaleX(){return this.spanX/this.sizeX}get scaleY(){return this.spanY/this.sizeY}get scaleZ(){return this.spanZ/this.sizeZ}get scale(){return new THREE.Vector3(this.scaleX,this.scaleY,this.scaleZ)}getAllVoxels(){let e=[],t=new f(this.sizeX+1,this.sizeY+1,this.sizeZ+1);for(let n=0,i=this.spans.length;n<i;n++){let i=this.spans[n].voxels;for(let n=0,r=i.length;n<r;n++){let r=i[n];e.push(r),t.add(r)}}return{voxels:e,voxelField:t}}getNormals(){switch(this.normalsMode){case 1:return o;case 2:return a;case 3:return h;case 4:return w;default:throw new Error(`Invalid normalsmode ${this.normalsMode}`)}}scaleHvaMatrix(e){return(e=e.clone()).elements[12]*=this.hvaMultiplier,e.elements[13]*=this.hvaMultiplier,e.elements[14]*=this.hvaMultiplier,e}toPlain(){return{name:this.name,normalsMode:this.normalsMode,minBounds:this.minBounds.toArray(),maxBounds:this.maxBounds.toArray(),sizeX:this.sizeX,sizeY:this.sizeY,sizeZ:this.sizeZ,hvaMultiplier:this.hvaMultiplier,transfMatrix:this.transfMatrix.toArray(),spans:this.spans}}fromPlain(e){return this.name=e.name,this.normalsMode=e.normalsMode,this.minBounds=(new THREE.Vector3).fromArray(e.minBounds),this.maxBounds=(new THREE.Vector3).fromArray(e.maxBounds),this.sizeX=e.sizeX,this.sizeY=e.sizeY,this.sizeZ=e.sizeZ,this.hvaMultiplier=e.hvaMultiplier,this.transfMatrix=(new THREE.Matrix4).fromArray(e.transfMatrix),this.spans=e.spans,this}}class u{read(e){this.fileName=e.readCString(16),this.paletteCount=e.readUint32(),this.headerCount=e.readUint32(),this.tailerCount=e.readUint32(),this.bodySize=e.readUint32(),this.paletteRemapStart=e.readUint8(),this.paletteRemapEnd=e.readUint8(),e.seek(e.position+768)}}u.size=32;class y{constructor(e){this.voxelCount=0,e instanceof class{constructor(e,t){this.stream=e,this.filename=t}static async fromRealFile(e){try{const t=new i(await e.arrayBuffer());return t._trimAlloc=()=>{},new this(t,e.name)}catch(t){if(t instanceof DOMException)throw new r(`File "${e.name}" could not be read (${t.name})`,{cause:t});throw t}}static fromBytes(e,t){let n=new i(e);return n._trimAlloc=()=>{},new this(n,t)}static factory(e,t,n=0,r=e.byteLength){const s=new DataView(e.buffer,e.byteOffset+n,r),o=new i(s);return o._trimAlloc=()=>{},new this(o,t)}readAsString(e){return this.stream.seek(0),this.stream.readString(this.stream.byteLength,e)}getBytes(){return new Uint8Array(this.stream.buffer,this.stream.byteOffset,this.stream.byteLength)}getSize(){return this.stream.byteLength}asFile(e){return new File([this.getBytes()],this.filename,{type:e})}}&&this.fromVirtualFile(e)}fromVirtualFile(e){this.filename=e.filename;let t=e.stream;if(this.sections=[],t.byteLength<u.size)return;let n=new u;if(n.read(t),!n.headerCount||!n.tailerCount||n.tailerCount!==n.headerCount)return;for(let e=0;e<n.headerCount;++e){const e=new l;this.readSectionHeader(e,t),this.sections.find((t=>t.name===e.name))&&console.warn(`Duplicate section name "${e.name}" found in VXL "${this.filename}".`),this.sections.push(e)}let i=t.position;t.seek(t.position+n.bodySize);let r=[];for(let e=0;e<n.tailerCount;++e)r[e]=this.readSectionTailer(this.sections[e],t);let s=0;for(let e=0;e<n.headerCount;++e)t.seek(i),s+=this.readSectionBodySpans(this.sections[e],r[e],t);this.voxelCount=s}readSectionHeader(e,t){e.name=t.readCString(16),t.readUint32(),t.readUint32(),t.readUint32()}readSectionTailer(e,t){const n=t.readUint32(),i=t.readUint32(),r=t.readUint32();return e.hvaMultiplier=t.readFloat32(),e.transfMatrix=this.readTransfMatrix(t),e.minBounds=new THREE.Vector3(t.readFloat32(),t.readFloat32(),t.readFloat32()),e.maxBounds=new THREE.Vector3(t.readFloat32(),t.readFloat32(),t.readFloat32()),e.sizeX=t.readUint8(),e.sizeY=t.readUint8(),e.sizeZ=t.readUint8(),e.normalsMode=t.readUint8(),{startingSpanOffset:n,endingSpanOffset:i,dataSpanOffset:r}}readTransfMatrix(e){let t=[];for(let n=0;n<3;++n)t.push(e.readFloat32(),e.readFloat32(),e.readFloat32(),e.readFloat32());return t.push(0,0,0,1),(new THREE.Matrix4).fromArray(t).transpose()}readSectionBodySpans(e,t,n){n.seek(n.position+t.startingSpanOffset);let{sizeX:i,sizeY:r,sizeZ:s}=e,o=new Array(r);for(let e=0;e<r;++e){o[e]=new Array(i);for(let t=0;t<i;++t)o[e][t]=n.readInt32()}let a=new Array(r);for(let e=0;e<r;++e){a[e]=new Array(i);for(let t=0;t<i;++t)a[e][t]=n.readInt32()}let h=e.spans=[],w=0;for(let e=0;e<r;++e)for(let t=0;t<i;++t){let i={x:t,y:e,voxels:this.readSpanVoxels(o[e][t],a[e][t],t,e,s,n)};h.push(i),w+=i.voxels.length}return w}readSpanVoxels(e,t,n,i,r,s){if(-1===e||-1===t)return[];let o=[];for(let e=0;e<r;){e+=s.readUint8();let t=s.readUint8();for(let r=0;r<t;++r){let t={x:n,y:i,z:e++,colorIndex:s.readUint8(),normalIndex:s.readUint8()};o.push(t)}s.readUint8()}return o}fromPlain(e){return this.sections=e.sections.map((e=>(new l).fromPlain(e))),this.voxelCount=e.voxelCount,this}toPlain(){return{sections:this.sections.map((e=>e.toPlain())),voxelCount:this.voxelCount}}getSection(e){return this.sections[e]}}var d;!function(e){e[e.Low=0]="Low",e[e.High=1]="High"}(d||(d={}));class c{build(e,t=!1){let{voxelField:n}=e.getAllVoxels();const i=t?(e,t,i)=>{let r=n.get(e,t,i);return r?r.colorIndex:0}:(e,t,i)=>{let r=n.get(e,t,i);return r?r.normalIndex+256*r.colorIndex:0};let{vertices:r,faces:s}=function(e,t){for(var n=[],i=[],r=0;r<3;++r){var s=(r+1)%3,o=(r+2)%3,a=new Int32Array(3),h=new Int32Array(3),w=new Int32Array(2*(t[s]+1)),f=new Int32Array(t[s]),l=new Int32Array(t[s]),u=new Int32Array(2*t[o]),y=new Int32Array(2*t[o]),d=new Int32Array(24*t[o]),c=[[0,0],[0,0]];for(h[r]=1,a[r]=-1;a[r]<t[r];){var b=[],g=0;for(a[o]=0;a[o]<t[o];++a[o]){var m=0,A=0,E=0;for(a[s]=0;a[s]<t[s];++a[s],A=E){var _=0<=a[r]?e(a[0],a[1],a[2]):0,v=a[r]<t[r]-1?e(a[0]+h[0],a[1]+h[1],a[2]+h[2]):0;E=_,!_==!v?E=0:_||(E=-v),A!==E&&(w[m++]=a[s],w[m++]=E)}w[m++]=t[s],w[m++]=0;for(var U=0,T=0,B=0;T<g&&B<m-2;){let e=b[f[T]];var L=e.left[e.left.length-1][0],S=e.right[e.right.length-1][0],z=e.color,x=w[B],I=w[B+2],O=w[B+1];if(I>L&&S>x&&O===z)e.merge_run(a[o],x,I),l[U++]=f[T],++T,B+=2;else{if(I<=S){if(O){var M=new p(O,a[o],x,I);l[U++]=b.length,b.push(M)}B+=2}S<=I&&(e.close_off(a[o]),++T)}}for(;T<g;++T)b[f[T]].close_off(a[o]);for(;B<m-2;B+=2)x=w[B],I=w[B+2],(O=w[B+1])&&(M=new p(O,a[o],x,I),l[U++]=b.length,b.push(M));var F=l;l=f,f=F,g=U}for(T=0;T<g;++T)b[f[T]].close_off(t[o]);for(a[r]++,T=0;T<b.length;++T){let e=b[T];E=e.color;var N=!1;for(E<0&&(N=!0,E=-E),B=0;B<e.left.length;++B){u[B]=n.length;var R=[0,0,0],V=e.left[B];R[r]=a[r],R[s]=V[0],R[o]=V[1],n.push({position:R,value:E})}for(B=0;B<e.right.length;++B)y[B]=n.length,R=[0,0,0],V=e.right[B],R[r]=a[r],R[s]=V[0],R[o]=V[1],n.push({position:R,value:E});var Y=0,C=0,H=1,P=1,X=!0;for(d[C++]=u[0],d[C++]=e.left[0][0],d[C++]=e.left[0][1],d[C++]=y[0],d[C++]=e.right[0][0],d[C++]=e.right[0][1];H<e.left.length||P<e.right.length;){var k=!1;if(H===e.left.length)k=!0;else if(P!==e.right.length){var Z=e.left[H],G=e.right[P];k=Z[1]>G[1]}var D=k?y[P]:u[H],j=k?e.right[P]:e.left[H];if(k!==X)for(;Y+3<C;)N===k?i.push([d[Y],d[Y+3],D]):i.push([d[Y+3],d[Y],D]),Y+=3;else for(;Y+3<C;){for(B=0;B<2;++B)for(var $=0;$<2;++$)c[B][$]=d[C-3*(B+1)+$+1]-j[$];var W=c[0][0]*c[1][1]-c[1][0]*c[0][1];if(k===W>0)break;0!==W&&(N===k?i.push([d[C-3],d[C-6],D]):i.push([d[C-6],d[C-3],D])),C-=3}d[C++]=D,d[C++]=j[0],d[C++]=j[1],k?++P:++H,X=k}}}}return{vertices:n,faces:i}}(i,[e.sizeX,e.sizeY,e.sizeZ]),o=e.minBounds,a=e.scale,h=e.getNormals(),w=new Float32Array(3*r.length),f=new Float32Array(3*r.length),l=new Float32Array(3*r.length),u=0,y=0,d=0;for(let e=0,n=r.length;e<n;e++){let n=r[e],i=t?n.value:n.value/256|0;if(w[u++]=o.x+n.position[0]*a.x,w[u++]=o.y+n.position[1]*a.y,w[u++]=o.z+n.position[2]*a.z,l[d++]=i/255,l[d++]=0,l[d++]=0,!t){let e=n.value%256,t=h[Math.min(e,h.length-1)];f[y++]=t.x,f[y++]=t.y,f[y++]=t.z}}let c=new Uint32Array(3*s.length),b=0;for(let e=0,t=s.length;e<t;e++){let t=s[e];c[b++]=t[0],c[b++]=t[1],c[b++]=t[2]}let g=new THREE.BufferGeometry;return g.addAttribute("position",new THREE.BufferAttribute(w,3)),t||g.addAttribute("normal",new THREE.BufferAttribute(f,3)),g.addAttribute("color",new THREE.BufferAttribute(l,3)),g.setIndex(new THREE.BufferAttribute(c,1)),g=class{static mergeVertices(e,t=1e-4){t=Math.max(t,Number.EPSILON);const n={},i=e.getIndex(),r=e.getAttribute("position"),s=i?i.count:r.count;let o=0;const a=Object.keys(e.attributes),h={},w={},f=[],l=[(e,t)=>e.getX(t),(e,t)=>e.getY(t),(e,t)=>e.getZ(t),(e,t)=>e.getW(t)];for(let t=0,n=a.length;t<n;t++){const n=a[t];h[n]=[];const i=e.morphAttributes[n];i&&(w[n]=new Array(i.length).fill(void 0).map((()=>[])))}const u=Math.log10(1/t),y=Math.pow(10,u);for(let t=0;t<s;t++){const r=i?i.getX(t):t;let s="";for(let t=0,n=a.length;t<n;t++){const n=a[t],i=e.getAttribute(n),o=i.itemSize;for(let e=0;e<o;e++)s+=~~(l[e](i,r)*y)+","}if(s in n)f.push(n[s]);else{for(let t=0,n=a.length;t<n;t++){const n=a[t],i=e.getAttribute(n),s=e.morphAttributes[n],o=i.itemSize,f=h[n],u=w[n];for(let e=0;e<o;e++){const t=l[e];if(f.push(t(i,r)),s)for(let e=0,n=s.length;e<n;e++)u[e].push(t(s[e],r))}}n[s]=o,f.push(o),o++}}const d=e.clone();for(let t=0,n=a.length;t<n;t++){const n=a[t],i=e.getAttribute(n),r=new i.array.constructor(h[n]),s=new THREE.BufferAttribute(r,i.itemSize,i.normalized);if(d.addAttribute(n,s),n in w)for(let t=0;t<w[n].length;t++){const i=e.morphAttributes[n][t],r=new i.array.constructor(w[n][t]),s=new THREE.BufferAttribute(r,i.itemSize,i.normalized);d.morphAttributes[n][t]=s}}return d.setIndex(new THREE.BufferAttribute(new Uint32Array(f),1)),d}static mergeBufferGeometries(e,t=!1){const n=null!==e[0].index,i=new Set(Object.keys(e[0].attributes)),r={},s=new THREE.BufferGeometry;let o=0;for(let a=0;a<e.length;++a){const h=e[a];let w=0;if(n!==(null!==h.index))throw new Error("mergeBufferGeometries() failed with geometry at index "+a+". All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.");if(Object.keys(h.morphAttributes).length)throw new Error("mergeBufferGeometries() failed with geometry at index "+a+". Morph attributes are not supported");for(const e in h.attributes){if(!i.has(e))throw new Error("mergeBufferGeometries() failed with geometry at index "+a+'. All geometries must have compatible attributes; make sure "'+e+'" attribute exists among all geometries, or in none of them.');void 0===r[e]&&(r[e]=[]),r[e].push(h.attributes[e]),w++}if(w!==i.size)throw new Error("mergeBufferGeometries() failed with geometry at index "+a+". Make sure all geometries have the same number of attributes.");if(t){let e;if(n)e=h.index.count;else{if(void 0===h.attributes.position)throw new Error("mergeBufferGeometries() failed with geometry at index "+a+". The geometry must have either an index or a position attribute");e=h.attributes.position.count}s.addGroup(o,e,a),o+=e}}if(n){let t=0;const n=[];for(let i=0;i<e.length;++i){const r=e[i].index;for(let e=0;e<r.count;++e)n.push(r.getX(e)+t);t+=e[i].attributes.position.count}s.setIndex(new THREE.BufferAttribute(new(n.length>65535?Uint32Array:Uint16Array)(n),1))}for(const e in r){const t=this.mergeBufferAttributes(r[e]);if(!t)throw new Error("mergeBufferGeometries() failed while trying to merge the "+e+" attribute.");s.addAttribute(e,t)}return s}static mergeBufferAttributes(e){let t,n,i,r=0;for(let s=0;s<e.length;++s){const o=e[s];if(o.isInterleavedBufferAttribute)throw new Error("mergeBufferAttributes() failed. InterleavedBufferAttributes are not supported.");if(void 0===t&&(t=o.array.constructor),t!==o.array.constructor)throw new Error("mergeBufferAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes.");if(void 0===n&&(n=o.itemSize),n!==o.itemSize)throw new Error("mergeBufferAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes.");if(void 0===i&&(i=o.normalized),i!==o.normalized)throw new Error("mergeBufferAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes.");r+=o.array.length}const s=new t(r);let o=0;for(let t=0;t<e.length;++t)s.set(e[t].array,o),o+=e[t].array.length;return new THREE.BufferAttribute(s,n,i)}}.mergeVertices(g),g.computeBoundingBox(),t&&g.computeVertexNormals(),g}}class p{constructor(e,t,n,i){this.color=e,this.left=[[n,t]],this.right=[[i,t]]}close_off(e){this.left.push([this.left[this.left.length-1][0],e]),this.right.push([this.right[this.right.length-1][0],e])}merge_run(e,t,n){var i=this.left[this.left.length-1][0],r=this.right[this.right.length-1][0];i!==t&&(this.left.push([i,e]),this.left.push([t,e])),r!==n&&(this.right.push([r,e]),this.right.push([n,e]))}}class b{serialize(e){if(Object.keys(e.morphAttributes).length)throw new Error("Morph attributes are not supported");if(e.groups.length>1)throw new Error("Groups are not supported");let t=Object.keys(e.attributes),n=e.index,r=1+22*t.length+Object.values(e.attributes).map((e=>this.getTypedArrayByteSize(e.array))).reduce(((e,t)=>e+t),0)+1+(n?this.getTypedArrayByteSize(n.array):0),s=new i(new ArrayBuffer(r));s.writeUint8(t.length);for(let n of t){let t=e.getAttribute(n);s.writeCString(n,20),s.writeUint8(t.itemSize),s.writeUint8(Number(t.normalized)),this.writeTypedArray(s,t.array)}return s.writeUint8(Number(Boolean(n))),n&&this.writeTypedArray(s,n.array),s.seek(0),s.dynamicSize=!1,s.buffer}unserialize(e){let t=new THREE.BufferGeometry,n=e.readUint8();for(let i=0;i<n;i++){let n=e.readCString(20),i=e.readUint8(),r=Boolean(e.readUint8()),s=this.readTypedArray(e),o=new THREE.BufferAttribute(s,i,r);t.addAttribute(n,o)}if(Boolean(e.readUint8())){let n=this.readTypedArray(e);t.setIndex(new THREE.BufferAttribute(n,1))}return t}writeTypedArray(e,t){if(e.writeUint32(t.length),t instanceof Float32Array)e.writeUint8(0),e.writeFloat32Array(t);else if(t instanceof Uint32Array)e.writeUint8(1),e.writeUint32Array(t);else{if(!(t instanceof Uint16Array))throw new Error(`Unsupported array type "${t.constructor.name}"`);e.writeUint8(2),e.writeUint16Array(t)}}readTypedArray(e){let t=e.readUint32(),n=e.readUint8();switch(n){case 0:return e.readFloat32Array(t);case 1:return e.readUint32Array(t);case 2:return e.readUint16Array(t);default:throw new Error(`Unsupported array type "${n}"`)}}getTypedArrayByteSize(e){return 5+e.BYTES_PER_ELEMENT*e.length}}async function g(e,t){let n=(new y).fromPlain(e),i=[];for(let e of n.sections){let n=(new c).build(e,t===d.Low),r=(new b).serialize(n);i.push(r)}return i}}}]);